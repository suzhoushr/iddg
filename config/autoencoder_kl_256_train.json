{
    "name": "autoencoder_kl_sz256", // experiments name
    "gpu_ids": [0], // gpu ids list, default is single 0
    "seed" : -1, // random seed, seed <0 represents randomization not used 
    "finetune_norm": false, // find the parameters to optimize

    "path": { //set every part file path
        "base_dir": "experiments", // base path for all log except resume_state
        "code": "code", // code backup
        "tb_logger": "tb_logger", // path of tensorboard logger
        "results": "results",
        "checkpoint": "checkpoint",
        // "resume_state": "experiments/train_hw_sd15_sz256_label100_230331_093929/checkpoint/16" 
        "resume_state": null // ex: 100, loading .state  and .pth from given epoch and iteration
    },

    "datasets": { // train or test
        "train": { 
            "which_dataset": {  // import designated dataset using arguments 
                "name": ["data.dataset", "AutoEncoderDataset"], // import Dataset() class / function(not recommend) from data.dataset.py (default is [data.dataset.py])
                "args":{ // arguments to initialize dataset
                    "data_root": "datasets/history_dataset/train_all340.flist",
                    "data_len": -1,
                    "image_size": [256, 256]
                } 
            },
            "dataloader":{
                "validation_split": 40, // percent or number 
                "args":{ // arguments to initialize train_dataloader
                    "batch_size": 4, // batch size in each gpu
                    "num_workers": 4,
                    "shuffle": true,
                    "pin_memory": true,
                    "drop_last": true
                },
                "val_args":{ // arguments to initialize valid_dataloader, will overwrite the parameters in train_dataloader
                    "batch_size": 8, // batch size in each gpu
                    "num_workers": 8,
                    "shuffle": false,
                    "pin_memory": true,
                    "drop_last": false
                }
            }
        },
        "test": { 
            "which_dataset": {
                "name": ["data.dataset", "AutoEncoderDataset"], // import Dataset() class / function(not recommend) from default file
                "args":{
                    "data_root": "datasets/hw/test_hwpc_all256.flist",
                    "image_size": [256, 256]
                }
            },
            "dataloader":{
                "args":{
                    "batch_size": 8,
                    "num_workers": 8,
                    "pin_memory": true
                }
            }
        }
    },

    "model": { // networks/metrics/losses/optimizers/lr_schedulers is a list and model is a dict
        "which_model": { // import designated  model(trainer) using arguments 
            "name": ["models.model", "AutoEncoder"], // import Model() class / function(not recommend) from models.model.py (default is [models.model.py])
            "args": {
                "ema_scheduler": {
                    "ema_start": 1,
                    "ema_iter": 1,
                    "ema_decay": 0.9999
                },
                "optimizers": [
                    { "lr": 5e-5, "weight_decay": 0}   // { "lr": 5e-5, "weight_decay": 0}
                ]
            }
        }, 
        "which_networks": [ // import designated list of networks using arguments
            {
                "name": ["models.sd_v15_modules.autoencoderkl", "AutoencoderKL"], // import Network() class / function(not recommend) from default file (default is [models/network.py]) 
                "args": { // arguments to initialize network
                    "init_type": "kaiming", // method can be [normal | xavier| xavier_uniform | kaiming | orthogonal], default is kaiming
                    "module_name": "sd_v15", // sr3 | guided_diffusion | sd_v15
                    "sample_type": "ddim",  // ddpm | ddim | dpmsolver | dpmsolver++
                    "sample_timesteps": 300,
                    "unet": {
                        "image_size": 256,                  // 256
                        "in_channels": 6,                  // 6
                        "model_channels": 64,             // 64
                        "out_channels": 3,                 // 3
                        "num_res_blocks": 2,               // 2
                        "attention_resolutions": [         // [16]
                            32,
                            16,
                            8
                        ],
                        "dropout": 0.1,                     // 0.2
                        "channel_mult": [                   // [1, 2, 4, 8]
                            1,
                            2,
                            4,
                            8,
                            8,
                            8
                        ],
                        "conv_resample": true,              // true
                        "dims": 2,                           // None
                        "num_classes": 1000,                // 100
                        "use_checkpoint": false,            // false
                        "use_fp16": false,                  // false
                        "num_heads": 8,                     // 1
                        "num_head_channels": -1,            // 32
                        "num_heads_upsample": -1,           // -1
                        "use_scale_shift_norm": true,      // true
                        "resblock_updown": true,           // true, it is very strange that the loss could not decrease when this value set to false 
                        "use_new_attention_order": false,   // false
                        "use_spatial_transformer": false,    // custom transformer support
                        "transformer_depth": 1,             // custom transformer support
                        "context_dim": null,                 // custom transformer support
                        "n_embed": null,                    // custom support for prediction of discrete ids into codebook of first stage vq model
                        "legacy": false                     // None


                    },
                    "beta_schedule": {
                        "train": {
                            "schedule": "linear",
                            "n_timestep": 1000,   // original is 2000
                            // "n_timestep": 10, // debug
                            "linear_start": 1e-4,
                            "linear_end": 0.02
                        },
                        "test": {
                            "schedule": "linear",
                            "n_timestep": 1000,
                            "linear_start": 1e-4,
                            "linear_end": 0.02
                        }
                    }
                }
            }
        ],
        "which_losses": [ // import designated list of losses without arguments
            "mse_loss" // import mse_loss() function/class from default file (default is [models/losses.py]), equivalent to { "name": "mse_loss", "args":{}}
        ],
        "which_metrics": [ // import designated list of metrics without arguments
            "mae" // import mae() function/class from default file (default is [models/metrics.py]), equivalent to { "name": "mae", "args":{}}
        ]
    },

    "train": { // arguments for basic training
        "n_epoch": 1e8, // max epochs, not limited now
        "n_iter": 1e8, // max interations
        "val_epoch": 1, // valdation every specified number of epochs
        "save_checkpoint_epoch": 2,
        "log_iter": 1, // log every specified number of batches   //iterations
        "tensorboard" : true // tensorboardX enable
    },
    
    "debug": { // arguments in debug mode, which will replace arguments in train
        "val_epoch": 1,
        "save_checkpoint_epoch": 1,
        "log_iter": 2,
        "debug_split": 50 // percent or number, change the size of dataloder to debug_split.
    }
}
